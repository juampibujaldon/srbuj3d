# Generated by Django 5.2.6 on 2025-10-09 19:28

import django.db.models.deletion
from decimal import Decimal

from django.conf import settings
from django.db import migrations, models
from django.utils import timezone


def get_table_columns(connection, table):
    with connection.cursor() as cursor:
        return [col.name for col in connection.introspection.get_table_description(cursor, table)]


def migrate_order_statuses_and_items(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    OrderItem = apps.get_model("ventas", "OrderItem")
    Product = apps.get_model("ventas", "Product")

    status_map = {
        "pendiente": "pending",
        "pending": "pending",
        "procesando": "pending",
        "en_proceso": "pending",
        "enviado": "fulfilled",
        "entregado": "fulfilled",
        "fulfilled": "fulfilled",
        "cancelado": "cancelled",
        "cancelled": "cancelled",
        "pagado": "paid",
        "paid": "paid",
        "borrador": "draft",
        "draft": "draft",
    }

    for order in Order.objects.all():
        legacy_items = getattr(order, "legacy_items", None) or []
        subtotal = Decimal("0")

        for index, entry in enumerate(legacy_items):
            if not isinstance(entry, dict):
                continue
            title = entry.get("title") or entry.get("product_name") or f"Item #{index + 1}"
            try:
                quantity = int(entry.get("qty") or entry.get("quantity") or 1)
            except Exception:
                quantity = 1
            if quantity < 1:
                quantity = 1
            try:
                price = Decimal(str(entry.get("price") or entry.get("unit_price") or 0))
            except Exception:
                price = Decimal("0")
            metadata = {
                key: value
                for key, value in entry.items()
                if key not in {"title", "product_name", "qty", "quantity", "price", "unit_price", "sku", "id"}
            }

            product = None
            product_id = entry.get("product_id") or entry.get("id")
            if isinstance(product_id, int):
                product = Product.objects.filter(pk=product_id).first()

            OrderItem.objects.create(
                order=order,
                product=product,
                title=title[:255],
                sku=str(entry.get("sku") or "")[:120],
                quantity=quantity,
                unit_price=price,
                metadata=metadata,
            )
            subtotal += price * quantity

        order.subtotal = subtotal

        shipping_data = order.shipping_quote or {}
        shipping_cost = None
        for key in ("precio", "price", "amount", "total"):
            if key in shipping_data:
                try:
                    shipping_cost = Decimal(str(shipping_data[key]))
                except Exception:
                    shipping_cost = None
                break
        order.shipping_cost = shipping_cost or Decimal("0")
        order.total = order.subtotal + order.shipping_cost

        current_status = order.status
        new_status = status_map.get(current_status, "pending")
        order.status = new_status

        if new_status != "draft" and not order.submitted_at:
            order.submitted_at = order.created_at
        if new_status == "paid" and not order.paid_at:
            order.paid_at = timezone.now()
        if new_status == "cancelled" and not order.cancelled_at:
            order.cancelled_at = order.updated_at or timezone.now()
        if new_status == "fulfilled" and not order.fulfilled_at:
            order.fulfilled_at = order.updated_at or timezone.now()

        order.save(
            update_fields=[
                "status",
                "subtotal",
                "shipping_cost",
                "total",
                "submitted_at",
                "paid_at",
                "cancelled_at",
                "fulfilled_at",
            ]
        )


def noop_reverse(apps, schema_editor):
    pass


def copy_fecha_to_created_at(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection

    columns = get_table_columns(connection, table)
    if "fecha" not in columns:
        return

    quoted_table = schema_editor.quote_name(table)
    with connection.cursor() as cursor:
        cursor.execute(
            f"UPDATE {quoted_table} SET {schema_editor.quote_name('created_at')} = {schema_editor.quote_name('fecha')} "
            f"WHERE {schema_editor.quote_name('fecha')} IS NOT NULL"
        )


def fill_missing_created_at(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection
    now = timezone.now()

    quoted_table = schema_editor.quote_name(table)
    with connection.cursor() as cursor:
        cursor.execute(
            f"UPDATE {quoted_table} SET {schema_editor.quote_name('created_at')} = %s "
            f"WHERE {schema_editor.quote_name('created_at')} IS NULL",
            [now],
        )


def ensure_created_at_column(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection

    columns = get_table_columns(connection, table)
    if "created_at" in columns:
        return

    field = models.DateTimeField(null=True, blank=True)
    field.set_attributes_from_name("created_at")
    schema_editor.add_field(Order, field)


def rename_estado_to_status(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection

    columns = get_table_columns(connection, table)
    if "estado" not in columns:
        return
    column_type = "varchar(20)"
    default_clause = "DEFAULT 'pendiente'"
    quoted_table = schema_editor.quote_name(table)
    schema_editor.execute(
        f"ALTER TABLE {quoted_table} "
        f"CHANGE COLUMN {schema_editor.quote_name('estado')} {schema_editor.quote_name('status')} {column_type} NOT NULL {default_clause}"
    )


def ensure_shipping_address_column(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection
    columns = get_table_columns(connection, table)

    if "shipping_address" not in columns:
        field = models.JSONField(default=dict, blank=True)
        field.set_attributes_from_name("shipping_address")
        schema_editor.add_field(Order, field)

    if "shipping" in columns:
        quoted_table = schema_editor.quote_name(table)
        with connection.cursor() as cursor:
            cursor.execute(
                f"UPDATE {quoted_table} SET {schema_editor.quote_name('shipping_address')} = {schema_editor.quote_name('shipping')} "
                f"WHERE {schema_editor.quote_name('shipping')} IS NOT NULL"
            )


def ensure_payment_metadata_column(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection
    columns = get_table_columns(connection, table)

    if "payment_metadata" not in columns:
        field = models.JSONField(default=dict, blank=True)
        field.set_attributes_from_name("payment_metadata")
        schema_editor.add_field(Order, field)

    if "payment_info" in columns:
        quoted_table = schema_editor.quote_name(table)
        with connection.cursor() as cursor:
            cursor.execute(
                f"UPDATE {quoted_table} SET {schema_editor.quote_name('payment_metadata')} = {schema_editor.quote_name('payment_info')} "
                f"WHERE {schema_editor.quote_name('payment_info')} IS NOT NULL"
            )


def ensure_legacy_items_column(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection
    columns = get_table_columns(connection, table)

    if "legacy_items" not in columns:
        field = models.JSONField(default=list, blank=True)
        field.set_attributes_from_name("legacy_items")
        schema_editor.add_field(Order, field)

    if "items" in columns:
        quoted_table = schema_editor.quote_name(table)
        with connection.cursor() as cursor:
            cursor.execute(
                f"UPDATE {quoted_table} SET {schema_editor.quote_name('legacy_items')} = {schema_editor.quote_name('items')} "
                f"WHERE {schema_editor.quote_name('items')} IS NOT NULL"
            )


def drop_column_if_exists(schema_editor, table, column):
    connection = schema_editor.connection
    columns = get_table_columns(connection, table)
    if column not in columns:
        return
    schema_editor.execute(
        f"ALTER TABLE {schema_editor.quote_name(table)} DROP COLUMN {schema_editor.quote_name(column)}"
    )


def drop_shipping_column(apps, schema_editor):
    table = apps.get_model("ventas", "Order")._meta.db_table
    drop_column_if_exists(schema_editor, table, "shipping")


def drop_payment_info_column(apps, schema_editor):
    table = apps.get_model("ventas", "Order")._meta.db_table
    drop_column_if_exists(schema_editor, table, "payment_info")


def drop_items_column(apps, schema_editor):
    table = apps.get_model("ventas", "Order")._meta.db_table
    drop_column_if_exists(schema_editor, table, "items")


def drop_fecha_column(apps, schema_editor):
    table = apps.get_model("ventas", "Order")._meta.db_table
    drop_column_if_exists(schema_editor, table, "fecha")


def ensure_updated_at_column(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection
    columns = get_table_columns(connection, table)

    if "updated_at" in columns:
        return

    field = models.DateTimeField(auto_now=True)
    field.set_attributes_from_name("updated_at")
    schema_editor.add_field(Order, field)


def ensure_billing_address_column(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection
    if "billing_address" in get_table_columns(connection, table):
        return
    field = models.JSONField(default=dict, blank=True)
    field.set_attributes_from_name("billing_address")
    schema_editor.add_field(Order, field)


def ensure_cancelled_at_column(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection
    if "cancelled_at" in get_table_columns(connection, table):
        return
    field = models.DateTimeField(blank=True, null=True)
    field.set_attributes_from_name("cancelled_at")
    schema_editor.add_field(Order, field)


def ensure_fulfilled_at_column(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection
    if "fulfilled_at" in get_table_columns(connection, table):
        return
    field = models.DateTimeField(blank=True, null=True)
    field.set_attributes_from_name("fulfilled_at")
    schema_editor.add_field(Order, field)


def ensure_notes_column(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection
    if "notes" in get_table_columns(connection, table):
        return
    field = models.TextField(blank=True)
    field.set_attributes_from_name("notes")
    schema_editor.add_field(Order, field)


def ensure_paid_at_column(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection
    if "paid_at" in get_table_columns(connection, table):
        return
    field = models.DateTimeField(blank=True, null=True)
    field.set_attributes_from_name("paid_at")
    schema_editor.add_field(Order, field)


def ensure_shipping_cost_column(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection
    if "shipping_cost" in get_table_columns(connection, table):
        return
    field = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    field.set_attributes_from_name("shipping_cost")
    schema_editor.add_field(Order, field)


def ensure_submitted_at_column(apps, schema_editor):
    Order = apps.get_model("ventas", "Order")
    table = Order._meta.db_table
    connection = schema_editor.connection
    if "submitted_at" in get_table_columns(connection, table):
        return
    field = models.DateTimeField(blank=True, null=True)
    field.set_attributes_from_name("submitted_at")
    schema_editor.add_field(Order, field)


class Migration(migrations.Migration):

    dependencies = [
        ('ventas', '0004_product_mostrar_inicio'),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=ensure_created_at_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='order',
                    name='created_at',
                    field=models.DateTimeField(null=True, blank=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=rename_estado_to_status,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.RenameField(
                    model_name='order',
                    old_name='estado',
                    new_name='status',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=ensure_shipping_address_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='order',
                    name='shipping_address',
                    field=models.JSONField(blank=True, default=dict),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=ensure_payment_metadata_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='order',
                    name='payment_metadata',
                    field=models.JSONField(blank=True, default=dict),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=ensure_legacy_items_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='order',
                    name='legacy_items',
                    field=models.JSONField(blank=True, default=list),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=drop_shipping_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='order',
                    name='shipping',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=drop_payment_info_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='order',
                    name='payment_info',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=drop_items_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='order',
                    name='items',
                ),
            ],
        ),
        migrations.RunPython(
            code=copy_fecha_to_created_at,
            reverse_code=noop_reverse,
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=drop_fecha_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='order',
                    name='fecha',
                ),
            ],
        ),
        migrations.RunPython(
            code=fill_missing_created_at,
            reverse_code=noop_reverse,
        ),
        migrations.AlterField(
            model_name='order',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=ensure_updated_at_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='order',
                    name='updated_at',
                    field=models.DateTimeField(auto_now=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=ensure_billing_address_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='order',
                    name='billing_address',
                    field=models.JSONField(blank=True, default=dict),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=ensure_cancelled_at_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='order',
                    name='cancelled_at',
                    field=models.DateTimeField(blank=True, null=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=ensure_fulfilled_at_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='order',
                    name='fulfilled_at',
                    field=models.DateTimeField(blank=True, null=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=ensure_notes_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='order',
                    name='notes',
                    field=models.TextField(blank=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=ensure_paid_at_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='order',
                    name='paid_at',
                    field=models.DateTimeField(blank=True, null=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=ensure_shipping_cost_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='order',
                    name='shipping_cost',
                    field=models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=ensure_submitted_at_column,
                    reverse_code=noop_reverse,
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='order',
                    name='submitted_at',
                    field=models.DateTimeField(blank=True, null=True),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='order',
            name='payment_metadata',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AlterField(
            model_name='order',
            name='shipping_address',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AlterField(
            model_name='order',
            name='shipping_quote',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AlterField(
            model_name='order',
            name='status',
            field=models.CharField(choices=[('draft', 'Borrador'), ('pending', 'Pendiente'), ('paid', 'Pagado'), ('cancelled', 'Cancelado'), ('fulfilled', 'Completado')], default='draft', max_length=20),
        ),
        migrations.RunSQL("DROP TABLE IF EXISTS ventas_orderitem", reverse_sql=None),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('sku', models.CharField(blank=True, max_length=120)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('unit_price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='ventas.order')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_items', to='ventas.product')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.AddConstraint(
            model_name='orderitem',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 1)), name='order_item_quantity_positive'),
        ),
        migrations.RunSQL("DROP TABLE IF EXISTS ventas_orderfile", reverse_sql=None),
        migrations.CreateModel(
            name='OrderFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file', models.FileField(upload_to='ventas.models.order_file_upload_path')),
                ('original_name', models.CharField(max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('preview_url', models.URLField(blank=True)),
                ('uploaded_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='ventas.order')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_files', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.RemoveField(
            model_name='product',
            name='downloads',
        ),
        migrations.RemoveField(
            model_name='product',
            name='likes',
        ),
        migrations.RunPython(
            code=migrate_order_statuses_and_items,
            reverse_code=noop_reverse,
        ),
        migrations.RemoveField(
            model_name='order',
            name='legacy_items',
        ),
    ]
